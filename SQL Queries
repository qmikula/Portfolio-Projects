--------------------------Query for Top Ingredients Used in Different Time Periods--------------------------------
WITH mo AS (
    SELECT
        mo.start_date,
        mo.mo_id,
        mod.component_id,
        i.[description],
        CASE
            WHEN mo.[status] = 'Closed' AND mo.completed_qty > 0 THEN mod.mo_completed_qty + mod.mo_scrapped_qty
            WHEN mo.[status] = 'Released' THEN mod.mo_required_qty
            WHEN mo.[status] = 'Inactive' AND mo.start_date >= CAST(DATEADD(DAY, -5, GETDATE())AS DATE) THEN mod.mo_required_qty
            ELSE 0
        END AS qty,
		i.cost_average
    FROM
        Manufacturing_Orders mo 
    LEFT JOIN
        Manufacturing_Orders_Detail mod ON mo.mo_id = mod.mo_id
    LEFT JOIN
        Items i ON mod.component_id = i.item_id
    WHERE
        mo.start_date BETWEEN CAST(DATEADD(MONTH, -12, GETDATE()) AS DATE) AND CAST(DATEADD(MONTH, 6, GETDATE()) AS DATE)
        AND
        mod.component_id LIKE '2%'
		AND
		mod.component_id NOT LIKE '25%'
		AND
		mod.component_id NOT LIKE '29%'
		AND
		mod.component_id NOT LIKE '%00629'
),

last_12_mo AS (
    SELECT
        TOP 30 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
		(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM
        mo
	LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(DATEADD(MONTH, -12, GETDATE()) AS DATE) AND CAST(GETDATE() AS DATE)
    GROUP BY
        component_id,
        mo.description,
		i.cost_average
    ORDER BY
        SUM(qty) DESC
),

last_6_mo AS (
    SELECT
        TOP 30 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
		(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM
        mo
	LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(DATEADD(MONTH, -6, GETDATE()) AS DATE) AND CAST(GETDATE() AS DATE)
    GROUP BY
        component_id,
        mo.description,
		i.cost_average
    ORDER BY
        SUM(qty) DESC
),

next_6_mo AS (
    SELECT
        TOP 30 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
		(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM
        mo
	LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(GETDATE() AS DATE) AND CAST(DATEADD(MONTH, 6, GETDATE()) AS DATE)
    GROUP BY
        component_id,
        mo.description,
		i.cost_average
    ORDER BY
        SUM(qty) DESC
),

last_and_next_6_mo AS (
    SELECT
        TOP 50 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
		(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM
        mo
	LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(DATEADD(MONTH, -6, GETDATE()) AS DATE) AND CAST(DATEADD(MONTH, 6, GETDATE()) AS DATE)
    GROUP BY
        component_id,
        mo.description,
		i.cost_average
    ORDER BY
        SUM(qty) DESC
)

SELECT 'last_12_months' AS time_period, * FROM last_12_mo
UNION ALL
SELECT 'last_6_mo' AS time_period, * FROM last_6_mo
UNION ALL
SELECT 'next_6_months' AS time_period, * FROM next_6_mo
UNION ALL
SELECT 'last_and_next_6_months' AS time_period, * FROM last_and_next_6_mo

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

--------------------------View for Rolling Six Month Sales--------------------------------
CREATE VIEW v_Rolling_Six_Months_Sales AS
    WITH ss_sales AS
        (
            SELECT
                CONCAT(agg_sales.order_year, '-', agg_sales.order_month) AS 'date',
                agg_sales.item_id,
                agg_sales.qty,
                ISNULL((agg_sales.amount + agg_sales.discount), 0) AS net_amount,
                agg_sales.sales_channel,
                agg_sales.brand,
                i.category,
                i.subcategory,
                i.[count],
                i.packaging_type
            FROM
                (
                    SELECT
                        YEAR(order_date) AS order_year,
                        MONTH(order_date) AS order_month,
                        item_id,
                        SUM(qty) AS qty,
                        SUM(order_line_amount) AS amount,
                        SUM(order_line_discount) AS discount,
                        store_group AS brand,
                        'DTC' AS sales_channel
                    FROM
                        Ship_Station_Sales
                    WHERE
                        order_date >= DATEADD(MONTH, -6, GETDATE())
                        AND
                        item_id NOT LIKE '%Apparel%'
                        AND
                        item_id NOT LIKE 'Needs Attention'
                        AND
                        RIGHT(item_id, 2) != 'SL'
                    GROUP BY
                        YEAR(order_date),
                        MONTH(order_date),
                        store_group,
                        item_id
                ) agg_sales
            LEFT JOIN
                Items_Custom_Fields i ON agg_sales.item_id = i.item_id
        ),

    qb_sales AS
        (
            SELECT
                CONCAT(agg_sales.order_year, '-', agg_sales.order_month) AS 'date',
                agg_sales.item_id,
                agg_sales.qty,
                (agg_sales.amount + agg_sales.discount) AS net_amount,
                i.sales_channel,
                i.customer AS brand,
                i.category,
                i.subcategory,
                i.[count],
                i.packaging_type
            FROM
                (
                    SELECT
                        YEAR(so.txn_date) AS order_year,
                        MONTH(so.txn_date) AS order_month,
                        CASE
                            WHEN item_id LIKE '71%' THEN item_id
                            ELSE LEFT(item_id, 8)
                        END AS item_id,
                        SUM(so.qty) AS qty,
                        SUM(so.amount) AS amount,
                        0 AS discount
                    FROM
                        Sales_Orders so
                    LEFT JOIN
                        (SELECT customer_id, customer_name FROM Customers) c ON so.customer_id = c.customer_id
                    WHERE
                        item_id LIKE '7%'
                        AND
                        txn_date >= DATEADD(MONTH, -6, GETDATE())
                        AND
                        c.customer_name NOT LIKE '%Global Widget%'
                        AND
                        txn_num != '42214'
                    GROUP BY
                        YEAR(so.txn_date),
                        MONTH(so.txn_date),
                        item_id
                ) agg_sales
            LEFT JOIN
                Items_Custom_Fields i ON agg_sales.item_id = i.item_id
        )

    SELECT
        final_dataset.date,
        final_dataset.item_id,
        i.[description],
        final_dataset.qty,
        final_dataset.net_amount,
        final_dataset.sales_channel,
        final_dataset.brand,
        final_dataset.category,
        final_dataset.subcategory,
        final_dataset.[count],
        final_dataset.packaging_type
    FROM
        (
            SELECT * FROM ss_sales
            UNION ALL
            SELECT * FROM qb_sales
        ) final_dataset
    LEFT JOIN
        (SELECT item_id, [description] FROM Items) i ON final_dataset.item_id = i.item_id;

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

