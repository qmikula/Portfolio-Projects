--------------------------Query for Top Ingredients Used in Different Time Periods--------------------------------
WITH mo AS (
    SELECT
        mo.start_date,
        mo.mo_id,
        mod.component_id,
        i.[description],
        CASE
            WHEN mo.[status] = 'Closed' AND mo.completed_qty > 0 THEN mod.mo_completed_qty + mod.mo_scrapped_qty
            WHEN mo.[status] = 'Released' THEN mod.mo_required_qty
            WHEN mo.[status] = 'Inactive' AND mo.start_date >= CAST(DATEADD(DAY, -5, GETDATE())AS DATE) THEN mod.mo_required_qty
            ELSE 0
        END AS qty,
		i.cost_average
    FROM
        Manufacturing_Orders mo 
    LEFT JOIN
        Manufacturing_Orders_Detail mod ON mo.mo_id = mod.mo_id
    LEFT JOIN
        Items i ON mod.component_id = i.item_id
    WHERE
        mo.start_date BETWEEN CAST(DATEADD(MONTH, -12, GETDATE()) AS DATE) AND CAST(DATEADD(MONTH, 6, GETDATE()) AS DATE)
        AND
        mod.component_id LIKE '2%'
	AND
	mod.component_id NOT LIKE '25%'
	AND
	mod.component_id NOT LIKE '29%'
	AND
	mod.component_id NOT LIKE '%00629'
),
last_12_mo AS (
    SELECT
        TOP 30 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
	(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM
        mo
	LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(DATEADD(MONTH, -12, GETDATE()) AS DATE) AND CAST(GETDATE() AS DATE)
    GROUP BY
        component_id,
        mo.description,
	i.cost_average
    ORDER BY
        SUM(qty) DESC
),
last_6_mo AS (
    SELECT
        TOP 30 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
	(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM
        mo
	LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(DATEADD(MONTH, -6, GETDATE()) AS DATE) AND CAST(GETDATE() AS DATE)
    GROUP BY
        component_id,
        mo.description,
	i.cost_average
    ORDER BY
        SUM(qty) DESC
),
next_6_mo AS (
    SELECT
        TOP 30 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
	(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM mo
    LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(GETDATE() AS DATE) AND CAST(DATEADD(MONTH, 6, GETDATE()) AS DATE)
    GROUP BY
        component_id,
        mo.description,
	i.cost_average
    ORDER BY
        SUM(qty) DESC
),
last_and_next_6_mo AS (
    SELECT
        TOP 50 component_id,
        mo.description,
        COUNT(DISTINCT mo_id) AS num_mo,
        SUM(qty) AS qty,
	(SUM(qty) * i.cost_average) AS cost,
        ROW_NUMBER() OVER (ORDER BY SUM(qty) DESC) AS rank
    FROM mo
    LEFT JOIN Items i
	ON mo.component_id = i.item_id
    WHERE
        start_date BETWEEN CAST(DATEADD(MONTH, -6, GETDATE()) AS DATE) AND CAST(DATEADD(MONTH, 6, GETDATE()) AS DATE)
    GROUP BY
        component_id,
        mo.description,
	i.cost_average
    ORDER BY
        SUM(qty) DESC
)
SELECT 'last_12_months' AS time_period, * FROM last_12_mo
UNION ALL
SELECT 'last_6_mo' AS time_period, * FROM last_6_mo
UNION ALL
SELECT 'next_6_months' AS time_period, * FROM next_6_mo
UNION ALL
SELECT 'last_and_next_6_months' AS time_period, * FROM last_and_next_6_mo

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

--------------------------View for Rolling Six Month Sales--------------------------------
CREATE VIEW v_Rolling_Six_Months_Sales AS
    WITH ss_sales AS
        (
            SELECT
                CONCAT(agg_sales.order_year, '-', agg_sales.order_month) AS 'date',
                agg_sales.item_id,
                agg_sales.qty,
                ISNULL((agg_sales.amount + agg_sales.discount), 0) AS net_amount,
                agg_sales.sales_channel,
                agg_sales.brand,
                i.category,
                i.subcategory,
                i.[count],
                i.packaging_type
            FROM
                (
                    SELECT
                        YEAR(order_date) AS order_year,
                        MONTH(order_date) AS order_month,
                        item_id,
                        SUM(qty) AS qty,
                        SUM(order_line_amount) AS amount,
                        SUM(order_line_discount) AS discount,
                        store_group AS brand,
                        'DTC' AS sales_channel
                    FROM
                        Ship_Station_Sales
                    WHERE
                        order_date >= DATEADD(MONTH, -6, GETDATE())
                        AND
                        item_id NOT LIKE '%Apparel%'
                        AND
                        item_id NOT LIKE 'Needs Attention'
                        AND
                        RIGHT(item_id, 2) != 'SL'
                    GROUP BY
                        YEAR(order_date),
                        MONTH(order_date),
                        store_group,
                        item_id
                ) agg_sales
            LEFT JOIN
                Items_Custom_Fields i ON agg_sales.item_id = i.item_id
        ),
    qb_sales AS
        (
            SELECT
                CONCAT(agg_sales.order_year, '-', agg_sales.order_month) AS 'date',
                agg_sales.item_id,
                agg_sales.qty,
                (agg_sales.amount + agg_sales.discount) AS net_amount,
                i.sales_channel,
                i.customer AS brand,
                i.category,
                i.subcategory,
                i.[count],
                i.packaging_type
            FROM
                (
                    SELECT
                        YEAR(so.txn_date) AS order_year,
                        MONTH(so.txn_date) AS order_month,
                        CASE
                            WHEN item_id LIKE '71%' THEN item_id
                            ELSE LEFT(item_id, 8)
                        END AS item_id,
                        SUM(so.qty) AS qty,
                        SUM(so.amount) AS amount,
                        0 AS discount
                    FROM
                        Sales_Orders so
                    LEFT JOIN
                        (SELECT customer_id, customer_name FROM Customers) c ON so.customer_id = c.customer_id
                    WHERE
                        item_id LIKE '7%'
                        AND
                        txn_date >= DATEADD(MONTH, -6, GETDATE())
                        AND
                        c.customer_name NOT LIKE '%store1%'
                        AND
                        txn_num != '42214'
                    GROUP BY
                        YEAR(so.txn_date),
                        MONTH(so.txn_date),
                        item_id
                ) agg_sales
            LEFT JOIN
                Items_Custom_Fields i ON agg_sales.item_id = i.item_id
        )

    SELECT
        final_dataset.date,
        final_dataset.item_id,
        i.[description],
        final_dataset.qty,
        final_dataset.net_amount,
        final_dataset.sales_channel,
        final_dataset.brand,
        final_dataset.category,
        final_dataset.subcategory,
        final_dataset.[count],
        final_dataset.packaging_type
    FROM
        (
            SELECT * FROM ss_sales
            UNION ALL
            SELECT * FROM qb_sales
        ) final_dataset
    LEFT JOIN
        (SELECT item_id, [description] FROM Items) i ON final_dataset.item_id = i.item_id;

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

--------------------------Query for Expiring Ingredients--------------------------------
SELECT
	MOD.mo_id,
        MBI.item_id,
        MBI.description,
        MO.memo,
	MBI.bin_id,
	MO.build_item_id,
	MO.build_item_descr,
	MBI.lot,
	MBI.exp,
	DATEDIFF(day, GETDATE(), MBI.exp) AS days_until_expiration,
	CASE
		WHEN MBI.exp BETWEEN GETDATE() - 89 AND GETDATE() -1 THEN ' Expired'
		WHEN MBI.exp BETWEEN GETDATE() -1 AND GETDATE() + 31 THEN ' Month 1'
		WHEN MBI.exp BETWEEN GETDATE() + 30 AND GETDATE() + 61 THEN 'Month 2'
		WHEN MBI.exp BETWEEN GETDATE() + 60 AND GETDATE() + 91 THEN 'Month 3'
		WHEN MBI.exp BETWEEN GETDATE() + 90 AND GETDATE() + 121 THEN 'Month 4'
        WHEN MBI.exp BETWEEN GETDATE() + 120 AND GETDATE() + 151 THEN 'Month 5'
		WHEN MBI.exp > GETDATE() + 150 THEN 'Month 6+'
		ELSE 'N/A'
	END AS 'exp month',
	MO.start_date,
	CASE
           WHEN TRY_CONVERT(date, mo.start_date) >= CONVERT(date, GETDATE()) THEN mo.start_date
           ELSE NULL
	END AS filtered_start_date,
	CASE
                WHEN MO.start_date BETWEEN GETDATE() - 1 AND GETDATE() + 31 THEN ' Month 1'
		WHEN MO.start_date BETWEEN GETDATE() + 30 AND GETDATE() + 61 THEN 'Month 2'
		WHEN MO.start_date BETWEEN GETDATE() + 60 AND GETDATE() + 91 THEN 'Month 3'
		WHEN MO.start_date BETWEEN GETDATE() + 90 AND GETDATE() + 121 THEN 'Month 4'
        WHEN MO.start_date BETWEEN GETDATE() + 120 AND GETDATE() + 151 THEN 'Month 5'
		WHEN MO.start_date > GETDATE() + 150 THEN 'Month 6+'
		ELSE 'Previous'
	END AS 'start month',
	MBI.qty AS qty_onhand,
	MOD.mo_required_qty AS qty_needed,
        MO.ordered_qty,
	MO.completed_qty,
	MO.status,
	MO.work_center,
    	MO.bom_item_id,
	ICF.sales_channel,
	ICF.customer,
	ICF.category,
	ICF.subcategory,
	ICF.count,
	ICF.potency,
	ICF.flavor,
	ICF.packaging_type,
	ICF.raw_subcategory,
	CONCAT(MBI.item_id,' | ',MBI.description) AS 'ItemIDDescription',
	CONCAT(MOD.mo_id,' | ',MO.memo) AS MOIDMemo,
    	MOD.table_last_updated,
	CASE
		WHEN MBI.exp LIKE '2099%' THEN 'Yes'
		ELSE 'No'
	END AS 'Fake Exp?',
	CONCAT(MBI.item_id,'-',MBI.exp) AS 'Conc Column',
	(MBI.qty * I.cost_average) AS qty_value
FROM dbo.Misys_Bin_Inventory MBI
LEFT JOIN dbo.Manufacturing_Orders_Detail MOD
	ON MBI.item_id = MOD.component_id
LEFT JOIN Manufacturing_Orders MO
	ON MOD.mo_id = MO.mo_id
LEFT JOIN Items_Custom_Fields ICF
	ON MBI.item_id = ICF.item_id
LEFT JOIN Items I
	ON MBI.item_id = I.item_id
WHERE MBI.item_id LIKE '2%' AND MO.status = 'Released' AND MBI.exp > GETDATE() - 89 AND MO.completed_qty = 0

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

--------------------------COGs Variance Alert--------------------------------
WITH PO AS (
	SELECT
		mpd.po_id
		,po_detail_id
		,detail_type
		,po_detail_status
		,invoiced
		,mph.order_date
		,item_id
		,ordered_qty
		,received_qty
		,price
		,cost
		,mpd.invoiced_qty
		,invoiced_cost
		,description
		,purchase_um
		,um_conversion
		,mo_id
		,mo_detail_id
		,initial_due_date
		,real_due_date
	FROM prod.mi_po_detail MPD
	LEFT JOIN prod.mi_po_header MPH
		ON MPD.po_id = MPH.po_id
	WHERE item_id IS NOT NULL AND price > 0 AND order_date >= DATEADD(MONTH, -12, GETDATE())
),
RecentOrders AS (
    SELECT
        item_id,
        MAX(order_date) AS most_recent_date
    FROM PO
	WHERE order_date >= DATEADD(DAY,-7, GETDATE())
    GROUP BY item_id
),
HistoricalOrders AS (
    SELECT
        RO.item_id,
        PO.price AS unit_cost,
        PO.order_date
    FROM PO
    LEFT JOIN RecentOrders RO
        ON po.item_id = ro.item_id
	WHERE PO.order_date < ro.most_recent_date
),
Averages AS (
    SELECT
        item_id,
        AVG(unit_cost) AS historical_avg
    FROM HistoricalOrders
    GROUP BY item_id
	HAVING AVG(unit_Cost) >= 0.0000001
),
MostRecentCosts AS (
    SELECT
        PO.item_id,
        PO.price AS most_recent_cost
    FROM PO
    JOIN RecentOrders RO
        ON po.item_id = ro.item_id
       AND po.order_date = ro.most_recent_date
),
FlaggedChanges AS (
SELECT
	MRC.item_id,
	ROUND(MRC.most_recent_cost,3) AS most_recent_cost,
	ROUND(A.historical_avg,3) AS historical_avg,
	FORMAT((MRC.most_recent_cost - A.historical_avg) / A.historical_avg * 100, '0.#') AS percent_change,
    CASE
        WHEN ((MRC.most_recent_cost - A.historical_avg) / A.historical_avg * 100) >= 12 THEN 'FLAG'
        ELSE 'OK'
    END AS status
FROM MostRecentCosts MRC
JOIN Averages A
	ON MRC.item_id = A.item_id
)
SELECT
	FC.item_id AS Item_ID,
	I.description AS Description,
	CONCAT('$',FORMAT(most_recent_cost,'0.###')) AS Recent_Cost,
	CONCAT('$',FORMAT(historical_avg,'0.###')) AS Average_Cost,
	CONCAT(percent_change,'%') AS Percent_Change
FROM FlaggedChanges FC
LEFT JOIN Items I
	ON FC.item_id = I.item_id
WHERE status = 'FLAG'

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

--------------------------FB ADs LTV Analysis--------------------------------

WITH existing_customers AS (
SELECT
	DISTINCT customer_email
FROM Ship_Station_Sales
WHERE order_date < '2024-04-01'
AND
order_date > '2023-04-01'
AND
store_group = 'store1'
AND
customer_email IN ('customeremail1', 'customeremail2', 'customeremail3')
),
q2_customers AS (
SELECT
	DISTINCT customer_email
FROM Ship_Station_Sales
WHERE order_date >= '2024-04-01'
AND
order_date < '2024-07-01'
AND
store_group = 'store1'
AND
customer_email IN ('customeremail1', 'customeremail2', 'customeremail3')
),
sales AS (
SELECT
	SSS.item_id,
	order_id,
	order_num,
	order_date,
	order_status,
	store_group,
	qty,
	order_line_amount,
	order_line_discount_amount,
	order_line_shipping_amount,
	(I.cost_average*qty) AS order_cost,
	customer_id,
	customer_email
FROM Ship_Station_Sales SSS
LEFT JOIN Items I
	ON SSS.item_id = I.item_id
WHERE order_date >= '2024-04-01' AND store_group = 'store1' AND customer_email IN ('customeremail1', 'customeremail2', 'customeremail3')
),
fixed_Sales AS (
SELECT
	order_id,
	order_num,
	order_date,
	order_status,
	store_group,
	qty,
	(order_line_amount+order_line_discount_amount+order_line_shipping_amount) AS order_total,
	order_cost,
	customer_id,
	customer_email
FROM sales
WHERE order_date >= '2024-04-01'
),
customer_ltv AS (
    SELECT 
        q.customer_email,
        CASE 
            WHEN e.customer_email IS NOT NULL THEN 'Existing' 
            ELSE 'New' 
        END AS customer_type,
        COUNT(fs.order_id) AS total_orders,
        SUM(fs.order_total) AS total_revenue,
	SUM(order_cost) as total_cost,
        AVG(fs.order_total) AS avg_order_value,
        MIN(fs.order_date) AS first_order_date,
        MAX(fs.order_date) AS last_order_date,
        DATEDIFF(MONTH, MIN(fs.order_date), MAX(fs.order_date)) AS customer_lifespan_months,
	CASE 
		WHEN DATEDIFF(MONTH, MIN(fs.order_date), MAX(fs.order_date)) > 0 THEN 
		(SUM(fs.order_total) / DATEDIFF(MONTH, MIN(fs.order_date), MAX(fs.order_date)))
            ELSE 
                SUM(fs.order_total)
        END AS monthly_spend,
		COALESCE(
		(SELECT STRING_AGG(CAST(store_group AS NVARCHAR(MAX)), ', ') 
    FROM (SELECT DISTINCT fs.store_group 
		FROM fixed_sales fs 
		WHERE fs.customer_email = q.customer_email) AS distinct_stores), 
		'No Orders'
        ) AS stores_ordered_from
    FROM q2_customers q
    LEFT JOIN existing_customers e
	ON q.customer_email = e.customer_email
    LEFT JOIN fixed_sales fs
        ON q.customer_email = fs.customer_email
        AND fs.order_date >= '2024-04-01' AND fs.order_date <= '2025-01-31'
    GROUP BY q.customer_email, e.customer_email
),
data AS (
SELECT
	customer_email,
	customer_type AS q2_customer,
	total_orders,
	total_revenue,
	total_cost AS total_cogs,
	(total_revenue-total_cost) AS total_gross_profit,
	CASE
		WHEN MONTH(first_order_date) = 4 THEN 150.09
		WHEN MONTH(first_order_date) = 5 THEN 125.50
		WHEN MONTH(first_order_date) = 6 THEN 174
	END AS ad_cost_per_customer_all,
	CASE
		WHEN MONTH(first_order_date) = 4 AND customer_type = 'New' THEN 690.43
		WHEN MONTH(first_order_date) = 5 AND customer_type = 'New' THEN 354.41
		WHEN MONTH(first_order_date) = 6 AND customer_type = 'New' THEN 458.73
	END AS ad_cost_per_customer_new,
	avg_order_value,
	first_order_date,
	last_order_date,
	customer_lifespan_months,
	monthly_spend,
	stores_ordered_from
FROM customer_ltv
WHERE customer_email IS NOT NULL AND customer_email != ''
)
SELECT
	customer_email,
	q2_customer,
	total_orders,
	total_revenue,
	total_cogs,
	total_gross_profit,
	ad_cost_per_customer_all,
	ad_cost_per_customer_new,
	CASE
		WHEN MONTH(first_order_date) = 4 THEN (total_gross_profit - ad_cost_per_customer_all)
		WHEN MONTH(first_order_date) = 5 THEN (total_gross_profit - ad_cost_per_customer_all)
		WHEN MONTH(first_order_date) = 6 THEN (total_gross_profit - ad_cost_per_customer_all)
	END AS ltv_all,
	CASE
		WHEN MONTH(first_order_date) = 4 AND q2_customer = 'New' THEN (total_gross_profit - ad_cost_per_customer_new)
		WHEN MONTH(first_order_date) = 5 AND q2_customer = 'New' THEN (total_gross_profit - ad_cost_per_customer_new)
		WHEN MONTH(first_order_date) = 6 AND q2_customer = 'New' THEN  (total_gross_profit - ad_cost_per_customer_new)
	END AS ltv_new,
	avg_order_value,
	first_order_date,
	last_order_date,
	customer_lifespan_months,
	monthly_spend,
	stores_ordered_from,
	CASE
		WHEN last_order_date <= '2024-10-31' THEN 'Churned'
		ELSE 'Active'
	END AS churn_status
FROM data
